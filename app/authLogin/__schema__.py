from marshmallow import Schema, fields, validates_schema, ValidationError, validate

class LazySelectSchema(Schema):
    key = fields.Str()
    label = fields.Str()


class UserSchema(Schema):
    name = fields.Str()
    email = fields.Str()
    mobile = fields.Str(required=True, validate=validate.Length(equal=10))
    aadhar = fields.Str(validate=validate.Regexp(r"^[2-9]{1}[0-9]{11}$"))
    pan = fields.Str(validate=validate.Regexp(r"^[A-Z]{5}[0-9]{4}[A-Z]$"))
    minFund = fields.Float(allow_none=True)
    maxFund = fields.Float(allow_none=True)
    gstn = fields.Str()
    selectedPlan = fields.Str(allow_none=True)
    password = fields.Str()
    confirmPassword = fields.Str()
    line1 = fields.Str()
    line2 = fields.Str()
    city = fields.Str()
    ut = fields.Str()
    addedBy = fields.Nested(LazySelectSchema, required=False, allow_none=True)
    pincode = fields.Str()
    status = fields.Str()
    registerType = fields.Str()
    rootId = fields.Str()
    allotedTo = fields.Str()
    totalPeriod = fields.Str()
    interest = fields.Str()
    loanAmount = fields.Str()
    timeSchema = fields.Str()
    customAmount = fields.Str(allow_none=True)
    approvalStatus = fields.Str(allow_none=True)
    collectionDate = fields.Str(allow_none=True)
    isCustomForm = fields.Boolean()

class EditSchema(Schema):
    uid = fields.Str()
    name = fields.Str()
    email = fields.Str()
    mobile = fields.Str(required=True, validate=validate.Length(equal=10))
    aadhar = fields.Str(validate=validate.Regexp(r"^[2-9]{1}[0-9]{11}$"))
    pan = fields.Str(validate=validate.Regexp(r"^[A-Z]{5}[0-9]{4}[A-Z]$"))
    minFund = fields.Float()
    maxFund = fields.Float()
    gstn = fields.Str()
    address = fields.Str()
    line1 = fields.Str()
    line2 = fields.Str()
    city = fields.Str()
    ut = fields.Str()
    pincode = fields.Str()
    status = fields.Str()
    updatedBy = fields.Nested(LazySelectSchema, required=False, allow_none=True)
    allotedTo = fields.Str()
    totalPeriod = fields.Str()
    interest = fields.Str()
    loanAmount = fields.Str()
    timeSchema = fields.Str()
    customAmount = fields.Str()
    onGoingDue = fields.Int()
    pendingDues = fields.List(fields.Int)
    isCustomForm = fields.Boolean()
    membershipStatus = fields.String(allow_none=True)
    rootId = fields.String()

class ApproveAdminSchema(Schema):
    uid = fields.String()
    status = fields.String()
